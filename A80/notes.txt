BROM is at address 0, at least after boot1 started.

Boot code is loaded at address 0x10000 (SRAM_A1).

From kernel headers, which matches observations:

SUNXI_BROM0_N_PBASE                       0x00000000
SUNXI_BROM0_N_SIZE                        0x00008000
SUNXI_SRAM_A1_PBASE                       0x00010000
SUNXI_SRAM_A1_SIZE                        0x0000a000

Not sure what BROM1 is. Range overlaps with BROM0

SUNXI_BROM1_S_PBASE                       0x00000000
SUNXI_BROM1_S_SIZE                        0x00010000

Haven't tested any of the following yet

SUNXI_SRAM_A2_PBASE                       0x08100000
SUNXI_SRAM_A2_SIZE                        0x00028000
SUNXI_SRAM_B_PBASE                        0x00020000
SUNXI_SRAM_B_SIZE                         0x00040000
SUNXI_SRAM_C_PBASE                        0x01d00000
SUNXI_SRAM_C_SIZE                         0x00100000
SUNXI_DRAM_PBASE                          0x20000000 /* 0x20000000 ~ 0x220000000(size: 8G) */
SUNXI_GPU_PBASE                           0x02000000
SUNXI_GPU_SIZE                            0x01000000

Boot headers seem to be mostly the same as before

All structs available in kernel & u-boot headers.

typedef struct _Boot_file_head
{
        __u32  jump_instruction;   // one intruction jumping to real code
        __u8   magic[MAGIC_SIZE];  // ="eGON.BT0"
        __u32  check_sum;          // generated by PC
        __u32  length;             // generated by PC
        __u32  pub_head_size;      // the size of boot_file_head_t
        __u8   pub_head_vsn[4];    // the version of boot_file_head_t
        __u8   file_head_vsn[4];   // the version of boot0_file_head_t or boot1_file_head_t
        __u8   Boot_vsn[4];        // Boot version
        __u8   eGON_vsn[4];        // eGON version
        __u8   platform[8];        // platform information
}boot_file_head_t;

typedef struct _boot0_private_head_t
{
        __u32                       prvt_head_size;
        char                        prvt_head_vsn[4];       // the version of boot0_private_head_t
        unsigned int                dram_para[32];;         // DRAM patameters for initialising dram. Original values is arbitrary,
        __s32                                           uart_port;              // UART控制器编号
        normal_gpio_cfg             uart_ctrl[2];           // UART控制器(调试打印口)数据信息
        __s32                       enable_jtag;            // 1 : enable,  0 : disable
    normal_gpio_cfg                 jtag_gpio[5];           // 保存JTAG的全部GPIO信息
    normal_gpio_cfg             storage_gpio[32];       // 存储设备 GPIO信息
    char                        storage_data[512 - sizeof(normal_gpio_cfg) * 32];      // 用户保留数据信息
    //boot_nand_connect_info_t    nand_connect_info;
}boot0_private_head_t;


u-boot/arch/arm/include/asm/arch-sun9iw1/dram.h
typedef struct _boot_dram_para_t
{
	//normal configuration
	unsigned int        dram_clk;
	unsigned int        dram_type;		//dram_type			DDR2: 2				DDR3: 3				LPDDR2: 6	DDR3L: 31
    unsigned int        dram_zq;
    unsigned int		dram_odt_en;

	//control configuration
	unsigned int		dram_para1;
    unsigned int		dram_para2;

	//timing configuration
	unsigned int		dram_mr0;
    unsigned int		dram_mr1;
    unsigned int		dram_mr2;
    unsigned int		dram_mr3;
    unsigned int		dram_tpr0;
    unsigned int		dram_tpr1;
    unsigned int		dram_tpr2;
    unsigned int		dram_tpr3;
    unsigned int		dram_tpr4;
    unsigned int		dram_tpr5;
   	unsigned int		dram_tpr6;

    //reserved for future use
    unsigned int		dram_tpr7;
    unsigned int		dram_tpr8;
    unsigned int		dram_tpr9;
    unsigned int		dram_tpr10;
    unsigned int		dram_tpr11;
    unsigned int		dram_tpr12;
    unsigned int		dram_tpr13;

}boot_dram_para_t;


nand_lib.h
typedef struct
{
	__u32		ChannelCnt;
	__u32        ChipCnt;                            //the count of the total nand flash chips are currently connecting on the CE pin
    __u32       ChipConnectInfo;                    //chip connect information, bit == 1 means there is a chip connecting on the CE pin
	__u32		RbCnt;
	__u32		RbConnectInfo;						//the connect  information of the all rb  chips are connected
    __u32        RbConnectMode;						//the rb connect  mode
	__u32        BankCntPerChip;                     //the count of the banks in one nand chip, multiple banks can support Inter-Leave
    __u32        DieCntPerChip;                      //the count of the dies in one nand chip, block management is based on Die
    __u32        PlaneCntPerDie;                     //the count of planes in one die, multiple planes can support multi-plane operation
    __u32        SectorCntPerPage;                   //the count of sectors in one single physic page, one sector is 0.5k
    __u32       PageCntPerPhyBlk;                   //the count of physic pages in one physic block
    __u32       BlkCntPerDie;                       //the count of the physic blocks in one die, include valid block and invalid block
    __u32       OperationOpt;                       //the mask of the operation types which current nand flash can support support
    __u32        FrequencePar;                       //the parameter of the hardware access clock, based on 'MHz'
    __u32        EccMode;                            //the Ecc Mode for the nand flash chip, 0: bch-16, 1:bch-28, 2:bch_32
    __u8        NandChipId[8];                      //the nand chip id of current connecting nand chip
    __u32       ValidBlkRatio;                      //the ratio of the valid physical blocks, based on 1024
	__u32 		good_block_ratio;					//good block ratio get from hwscan
	__u32		ReadRetryType;						//the read retry type
	__u32       DDRType;
	__u32		Reserved[22];
}boot_nand_para_t;

